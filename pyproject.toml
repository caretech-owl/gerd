[tool.poetry]
name = "team-red"
version = "0.1.0"
description = ""
authors = ["cto"]
license = ""
readme = "README.md"

[tool.poetry.scripts]
start = "main:app"

[tool.poetry.dependencies]
torch = [
    { version = ">=2.0.0, !=2.0.1", platform = "!darwin", source = "torch_cpu" },
    { version = ">=2.0.0, !=2.0.1", platform = "darwin", source = "pypi" },
]
python = ">=3.10, <3.12"
ctransformers = "^0.2.20"
transformers = "<4.34"
faiss-cpu = { version = "~1.7.4", optional = true }
faiss-gpu = { version = "~1.7.2", optional = true }
fastapi = "^0.104.1"
ipykernel = "^6.23.1"
langchain = "^0.0.331"
pypdf = "3.8.1"
sentence-transformers = "2.2.2"
uvicorn = "^0.22.0"
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"
poethepoet = "^0.24.2"
gradio = "^4.1.2"
requests = "^2.31.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pre-commit = "^3.5.0"
ruff = "^0.1.3"
mypy = "^1.6.1"
types-pyyaml = "^6.0.12.12"
types-requests = "^2.31.0.20240125"

[tool.poetry.extras]
cpu = ["faiss-cpu"]
gpu = ["faiss-gpu"]

[[tool.poetry.source]]
name = "torch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poe.tasks]
test = "poetry run pytest"
qa = "poetry run gradio team_red/frontends/qa_frontend.py"
gen = "poetry run gradio team_red/frontends/gen_frontend.py"
server = "poetry run python -m team_red.backends.rest_server"

[tool.ruff.lint]
# 1. Enable flake8-bugbear (`B`) rules, in addition to the defaults.
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "I",    # isort (imports) styling
    "N",    # pep8 naming checks
    "B",    # bugbear checks
    "ANN",  # type annotations
    "S",    # bandid code security
    "C",    # improve code comprehension
    "EM",   # use recommended error message composition
    "G",    # use recommended logging format
    "T20",  # no print allowed
    "PT",   # pytest styling recommendations
    "SLF",  # prevent access to private members
    "SIM",  # code simplification recommendations
    "TCH",  # checks for type checking imports
    "ARG",  # no unused arguments
    "PERF", # performance anti pattern
    # "FURB",  # enforces modern python
    # "D",     # enforce documented functions [will be enabled soon]
]

# 2. Avoid enforcing line-length violations (`E501`)
ignore = [
    "ANN101", # do not enforce self type annotation
    "ANN102", # do not enforce cls type annoation
]

# 3. Fix everything except flake8-bugbear (`B`) violations.
fixable = ["ALL"]
unfixable = ["B"]

# 4. Things to ignore
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"] # assert is fine in pytest
# "__init__.py" = ["E402"]
# 
# "**/{tests,docs,tools}/*" = ["E402"]

# [tool.ruff.format]
# # 5. Use single quotes for non-triple-quoted strings.
# quote-style = "single"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
