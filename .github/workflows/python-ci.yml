# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: python-ci

on:
  push:
    branches: [main, dev-gha]
  pull_request:
    branches: [main]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "poetry"
      - name: Install development dependencies with extras
        run: poetry install --with dev --extras cpu
      - name: Run ruff linting via pre-commit on all files and verbose
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: ruff --all-files -v
      - name: Run mypy on package
        run: poetry run mypy gerd
  testing:
    needs: linting
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.12", "3.9"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Cache HuggingFace models and data
        uses: actions/cache@v3
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-hf
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - name: Install development dependencies with extras
        run: poetry install --with dev --extras cpu
      # - name: Install torch cpu version for Linux
      #   if: matrix.os == 'ubuntu-latest'
      #   run: pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
      - name: Run pytests without coverage for now
        run: poetry run pytest
    # - name: Test with pytest
    #   run: |
    #     coverage run --source=transitions -m pytest --doctest-modules tests/
    #     coverage xml --ignore-errors
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     env_vars: OS,PYTHON
    #     fail_ci_if_error: true
    #     files: ./coverage.xml
    #     name: codecov-umbrella
    #     verbose: true
